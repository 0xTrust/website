[{"authors":null,"categories":null,"date":1552176000,"description":"","dir":"posts/2019/top-engineering-blogs-from-tech-companies-to-follow-in-2019/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":1552176000,"objectID":"6c305e48a2f2c5cae6588b9b057ac076","permalink":"https://tonyxu.io/zh/posts/2019/top-engineering-blogs-from-tech-companies-to-follow-in-2019/","publishdate":"2019-03-10T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2019/top-engineering-blogs-from-tech-companies-to-follow-in-2019/","section":"posts","summary":"这份列表包含了我订阅的主要科技公司技术博客。我从他们的技术博客当中学习他们是如何搭建高性能、高可扩展、高可用的技术基础设施以及他们在搭建这些基础设施的过程中总结的的最佳实践。\n我使用RSS阅读器订阅这些博客并每日阅读他们的更新。\n(按字母顺序排列)\n    Airbnb Engineering \u0026amp; Data Science\n    Bitly Engineering Blog\n    Dropbox Tech Blog\n    Etsy - Code as Craft\n    Facebook Code - Facebook Engineering Blog\n    code.flickr.com\n    GitHub Engineering\n    Google AI Blog\n    Heroku Blog - Engineering","tags":null,"title":"2019年最应该关注的科技公司技术博客","type":"posts","url":"/zh/posts/2019/top-engineering-blogs-from-tech-companies-to-follow-in-2019/","weight":0,"wordcount":95},{"authors":null,"categories":null,"date":1552176000,"description":"","dir":"posts/2019/top-engineering-blogs-from-tech-companies-to-follow-in-2019/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":[],"kind":"page","lang":"en","lastmod":1552176000,"objectID":"116149bbad65f328925e03dad342ae8b","permalink":"https://tonyxu.io/posts/2019/top-engineering-blogs-from-tech-companies-to-follow-in-2019/","publishdate":"2019-03-10T00:00:00Z","readingtime":1,"relpermalink":"/posts/2019/top-engineering-blogs-from-tech-companies-to-follow-in-2019/","section":"posts","summary":"Here is a list of top engineering blogs from tech companies that I follow. I learn how the tech companies build technology infrastructure with high performance, high scalability, and high availability and their best practices summarized along with building the infrastructure.\nI subscribed the blogs using RSS reader and read the update everyday.\n(in alphabetical order)\n    Airbnb Engineering \u0026amp; Data Science\n    Bitly Engineering Blog","tags":null,"title":"Top Engineering Blogs from Tech Companies to Follow in 2019","type":"posts","url":"/posts/2019/top-engineering-blogs-from-tech-companies-to-follow-in-2019/","weight":0,"wordcount":148},{"authors":null,"categories":null,"date":1552089600,"description":"","dir":"reads/2019-03-09/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":[],"kind":"page","lang":"zh","lastmod":1552089600,"objectID":"d89477afa990f0ae6911f27d8f826e92","permalink":"https://tonyxu.io/zh/reads/2019-03-09/","publishdate":"2019-03-09T00:00:00Z","readingtime":1,"relpermalink":"/zh/reads/2019-03-09/","section":"reads","summary":"Microservice Architecture at Medium (medium.engineering)\n At Medium, our technical stack started with a monolithic Node.js app back in 2012. We have built a couple of satellite services, but we haven’t created a strategy to adopt the microservice architecture systematically. As the system becomes more complex and the team grows, we moved to a microservice architecture in early 2018. In this post, we want to share our experiences of doing it effectively and avoiding microservice syndromes.","tags":null,"title":"Medium的微服务架构","type":"reads","url":"/zh/reads/2019-03-09/","weight":0,"wordcount":134},{"authors":null,"categories":null,"date":1552089600,"description":"","dir":"reads/2019-03-09/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":[],"kind":"page","lang":"en","lastmod":1552089600,"objectID":"ec7233ca941172b39ddd01fe6d8fae42","permalink":"https://tonyxu.io/reads/2019-03-09/","publishdate":"2019-03-09T00:00:00Z","readingtime":1,"relpermalink":"/reads/2019-03-09/","section":"reads","summary":"Microservice Architecture at Medium (medium.engineering)\n At Medium, our technical stack started with a monolithic Node.js app back in 2012. We have built a couple of satellite services, but we haven’t created a strategy to adopt the microservice architecture systematically. As the system becomes more complex and the team grows, we moved to a microservice architecture in early 2018. In this post, we want to share our experiences of doing it effectively and avoiding microservice syndromes.","tags":null,"title":"Microservice Architecture at Medium","type":"reads","url":"/reads/2019-03-09/","weight":0,"wordcount":178},{"authors":null,"categories":null,"date":1551830400,"description":"","dir":"reads/2019-03-06/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":[],"kind":"page","lang":"en","lastmod":1551830400,"objectID":"627b6530720586b2c5bfdf495b60ae96","permalink":"https://tonyxu.io/reads/2019-03-06/","publishdate":"2019-03-06T00:00:00Z","readingtime":1,"relpermalink":"/reads/2019-03-06/","section":"reads","summary":"This Is Silicon Valley (onezero.medium.com)\n Everyone wears Patagonia and North Face, everyone has AirPods hanging from their ears, and everyone goes to Lake Tahoe on weekends. And everyone talks about the same things: startups, blockchain, machine learning, and startups with blockchain and machine learning.\nAs Jeffrey Hammerbacher, a former Facebook executive, told Bloomberg, “The best minds of my generation are thinking about how to make people click ads.”\n The Silicon Valley author described is exactly what I see in the Silivon Valley.","tags":null,"title":"This Is Silicon Valley","type":"reads","url":"/reads/2019-03-06/","weight":0,"wordcount":158},{"authors":null,"categories":null,"date":1551830400,"description":"","dir":"reads/2019-03-06/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":1551830400,"objectID":"ea09b3704fe54e2096114a8c815ff2bf","permalink":"https://tonyxu.io/zh/reads/2019-03-06/","publishdate":"2019-03-06T00:00:00Z","readingtime":1,"relpermalink":"/zh/reads/2019-03-06/","section":"reads","summary":"This Is Silicon Valley (onezero.medium.com)\n Everyone wears Patagonia and North Face, everyone has AirPods hanging from their ears, and everyone goes to Lake Tahoe on weekends. And everyone talks about the same things: startups, blockchain, machine learning, and startups with blockchain and machine learning.\nAs Jeffrey Hammerbacher, a former Facebook executive, told Bloomberg, “The best minds of my generation are thinking about how to make people click ads.”\n 作者描述的硅谷正是我所见到的真实硅谷。不仅如此，我见到的许多有着聪明头脑却只会谈论买房、股票、升职加薪。我所见到的人同质化严重，他们有类似的背景(计算机专业)、类似的工作(软件工程师)、类似的爱好(徒步、桌游、太浩湖滑雪)、类似的兴趣(科技、股票、房产、升职加薪)。如果你不生活在硅谷，你可以跟随作者一同了解硅谷也许你不了解的一面。","tags":null,"title":"这就是硅谷","type":"reads","url":"/zh/reads/2019-03-06/","weight":0,"wordcount":69},{"authors":null,"categories":null,"date":1551571200,"description":"","dir":"reads/2019-03-03/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":[],"kind":"page","lang":"en","lastmod":1551571200,"objectID":"2dafc5c59fa3869c88f210fc95839256","permalink":"https://tonyxu.io/reads/2019-03-03/","publishdate":"2019-03-03T00:00:00Z","readingtime":1,"relpermalink":"/reads/2019-03-03/","section":"reads","summary":"UTC is Enough for Everyone, Right? (zachholman.com)\n It turns out humans have had a long, long history of poorly dealing with time, so when you hammer your head against the wall trying to deal with a timezone bug, well, you’re just the last in a long, long line of human beings that are terrible at all this! Congrats. You’re pretty unremarkable.\n The author talks about long history of time and how horrible we have been dealing with time.","tags":null,"title":"UTC is Enough for Everyone, Right?","type":"reads","url":"/reads/2019-03-03/","weight":0,"wordcount":100},{"authors":null,"categories":null,"date":1551571200,"description":"","dir":"reads/2019-03-03/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":1551571200,"objectID":"0e9d3e8021b882010f1250e88530be1d","permalink":"https://tonyxu.io/zh/reads/2019-03-03/","publishdate":"2019-03-03T00:00:00Z","readingtime":1,"relpermalink":"/zh/reads/2019-03-03/","section":"reads","summary":"UTC is Enough for Everyone, Right? (zachholman.com)\n It turns out humans have had a long, long history of poorly dealing with time, so when you hammer your head against the wall trying to deal with a timezone bug, well, you’re just the last in a long, long line of human beings that are terrible at all this! Congrats. You’re pretty unremarkable.\n 作者讨论了“时间”的发展历程，以及我们在这期间是如何糟糕的处理“时间”这个问题。为了解决“时间”在计算机当中可能遇到的复杂问题，我们应该尽可能简化处理并且采用通用标准 (例如协调世界时(UTC), ISO 8601).","tags":null,"title":"协调世界时已经足够了，是吗?","type":"reads","url":"/zh/reads/2019-03-03/","weight":0,"wordcount":65},{"authors":null,"categories":null,"date":1548979200,"description":"","dir":"posts/2019/my-productivity-tools-and-development-setup-recommended-to-software-engineers/","expirydate":-62135596800,"fuzzywordcount":1600,"keywords":[],"kind":"page","lang":"en","lastmod":1548979200,"objectID":"787ff6e6f3445b6bdc3f71a1a8215d75","permalink":"https://tonyxu.io/posts/2019/my-productivity-tools-and-development-setup-recommended-to-software-engineers/","publishdate":"2019-02-01T00:00:00Z","readingtime":8,"relpermalink":"/posts/2019/my-productivity-tools-and-development-setup-recommended-to-software-engineers/","section":"posts","summary":"Hardware Laptop 👉 Apple MacBook Pro (13-inch, 2017, Four Thunderbolt 3 Ports)\n- 13-inch\n- 2017 Year\n- 3.5 GHz Intel Core i7 Processor\n- 16 GB Memory\n- 256 GB Storage\nMy MacBook Pro (company provided) is the top 1 productivity tool for me. I use it to code, write blogs, and everything.\nMobile Phone 👉 Apple iPhone X\nI\u0026rsquo;m using iPhone X as my mobile phone. I have been an iPhone person ever since 2013 from an iPhone 4.","tags":null,"title":"My Productivity Tools and Development Setup Recommended to Software Engineers","type":"posts","url":"/posts/2019/my-productivity-tools-and-development-setup-recommended-to-software-engineers/","weight":0,"wordcount":1518},{"authors":null,"categories":null,"date":1548979200,"description":"","dir":"posts/2019/my-productivity-tools-and-development-setup-recommended-to-software-engineers/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":[],"kind":"page","lang":"zh","lastmod":1548979200,"objectID":"e191e16393aa57f7f454ba49fdd124d5","permalink":"https://tonyxu.io/zh/posts/2019/my-productivity-tools-and-development-setup-recommended-to-software-engineers/","publishdate":"2019-02-01T00:00:00Z","readingtime":2,"relpermalink":"/zh/posts/2019/my-productivity-tools-and-development-setup-recommended-to-software-engineers/","section":"posts","summary":"硬件 笔记本 👉 苹果 MacBook Pro (13-inch, 2017, Four Thunderbolt 3 Ports)\n- 13 英寸\n- 2017年\n- 3.5 GHz Intel Core i7 Processor\n- 16 GB 内存\n- 256 GB 存储\n我的苹果笔记本是我的第一生产力工具。我用它来写代码，写博客，和很多其他事情。\n手机 👉 苹果 iPhone X\n我目前使用iPhone X作为手机。我从2013年的iPhone 4开始成为iPhone用户。在使用iPhone之前我还用过Nexus S安卓手机一段时间。iOS生态系统，更好的通知系统和应用质量是我一直追随iOS设备的主要原因。\n台式机 我其实并没有台式机。公司提供了每个月在 Azure 150美元的使用额度，所以我创建了一个Azure Windows 虚拟机作为Windows台式机的替代。 我使用这个虚拟机安装和测试只在Windows能用的软件，例如Power BI Desktop.\n工作站（公司工位） 👉 联想 ThinkVision P27h (双外接显示器)\n公司提供的标配，我从笔记本外接到这两台显示器。我通常在主屏幕开Slack窗口，其中一个外接显示器开浏览器，另一个外接显示器开代码编辑器VS Code或者邮箱客户端Outlook。\n👉 Herman Miller - Renew Sit-to-Stand Desk Rectangular\n公司提供的标配。尽管这款工作台电动调节高度的功能很酷，鼓励人们少坐多站，但我还是喜欢坐着用电脑的时候更舒服。\n👉 苹果 Magic Keyboard（带数字键盘）","tags":null,"title":"我的生产效率工具和开发环境（推荐给软件工程师们）","type":"posts","url":"/zh/posts/2019/my-productivity-tools-and-development-setup-recommended-to-software-engineers/","weight":0,"wordcount":314},{"authors":null,"categories":null,"date":1548028800,"description":"","dir":"posts/2019/use-github-to-mange-personal-knowledge-base/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":[],"kind":"page","lang":"en","lastmod":1548028800,"objectID":"c6bc402bf381570cc99f9e5d76a1cfcd","permalink":"https://tonyxu.io/posts/2019/use-github-to-mange-personal-knowledge-base/","publishdate":"2019-01-21T00:00:00Z","readingtime":2,"relpermalink":"/posts/2019/use-github-to-mange-personal-knowledge-base/","section":"posts","summary":"GitHub has become the one and only platform for developers. We collaborate on the platform for anything about code. Can GitHub help you anything else besides code? I have recently been frustrated choosing a tool to manage my personal knowledge base, although there are lots of choices such as note apps (Bear, Evernote), project management app (Trello), or knowledge management app (Notion.so), eventually GitHub turned out to my choice which has below pros:","tags":null,"title":"Use GitHub for Knowledge Base and Projects Management","type":"posts","url":"/posts/2019/use-github-to-mange-personal-knowledge-base/","weight":0,"wordcount":310},{"authors":null,"categories":null,"date":1548028800,"description":"","dir":"posts/2019/use-github-to-mange-personal-knowledge-base/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":1548028800,"objectID":"8f125a36a36e7bf90a372bd193875fc4","permalink":"https://tonyxu.io/zh/posts/2019/use-github-to-mange-personal-knowledge-base/","publishdate":"2019-01-21T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2019/use-github-to-mange-personal-knowledge-base/","section":"posts","summary":"GitHub 已经成为开发者最钟爱的平台，我们在 GitHub 上进行任何和代码相关的协作。除了代码，GitHub 还有什么可以为我们所用的呢？我最近就在选择一款个人知识管理和项目管理工具的问题上陷入了苦恼，尽管我们有非常多的选择，比如笔记应用 Bear 和 Evernote，项目管理应用 Trello，又或者知识管理应用 Notion，最后我选择的是 GitHub 这个我最爱的开发者平台，它有如下几个优点:\n 支持 Markdown\n 可以使用它组织短的笔记，或者长的文章\n 支持看板视图\n 它和你的日常工作完美集成\n  你是不是没有想过可以用 GitHub 做笔记、知识、和项目管理？让我来介绍一下我是如何使用它达成这些目的的。\n   GitHub 功能 用途     Issues 存放零散的 markdown 文章   Projects 有组织结构的看板视图   Wiki 有组织结构的知识维基    示例 GitHub Issues GitHub Issues 可以用来创建 markdown 文章。图片可以直接粘贴并会自动以 markdown 语法插入。你也可以给 GitHub Issues 贴上标签，或者添加到 GitHub Projects 的看板来结构化管理。我个人会使用 GitHub Issues 创建长篇文章，并在 GitHub Projects 的看板卡片引用，这样可以更有组织的管理 GitHub Issues 的文章。","tags":null,"title":"使用GitHub做个人知识和项目管理","type":"posts","url":"/zh/posts/2019/use-github-to-mange-personal-knowledge-base/","weight":0,"wordcount":75},{"authors":null,"categories":null,"date":1544054400,"description":"","dir":"posts/2018/technologies-learned-as-a-software-engineer/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":[],"kind":"page","lang":"en","lastmod":1544054400,"objectID":"4c01ac8ac3032c0e4b159fe511738beb","permalink":"https://tonyxu.io/posts/2018/technologies-learned-as-a-software-engineer/","publishdate":"2018-12-06T00:00:00Z","readingtime":1,"relpermalink":"/posts/2018/technologies-learned-as-a-software-engineer/","section":"posts","summary":"As a software engineer, I\u0026rsquo;m always excited in learning various new technologies. In this blog, I\u0026rsquo;ll keep a list of technology subjects I have already started learning or plan to learn in my life as a software engineer.\nNote: I will keep updating this page as I\u0026rsquo;m learning them\nHow I scale level of expertise for a technology:\n ⭒⭒⭒⭒⭒ (Newbie) - New to the technology\n ⭑⭒⭒⭒⭒ (Beginner) - Understand basic techniques and concepts","tags":null,"title":"Technologies Learned as a Software Engineer","type":"posts","url":"/posts/2018/technologies-learned-as-a-software-engineer/","weight":0,"wordcount":210},{"authors":null,"categories":null,"date":1544054400,"description":"","dir":"posts/2018/technologies-learned-as-a-software-engineer/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":[],"kind":"page","lang":"zh","lastmod":1544054400,"objectID":"b32290a6096e2b040a5bed2ad5342a3f","permalink":"https://tonyxu.io/zh/posts/2018/technologies-learned-as-a-software-engineer/","publishdate":"2018-12-06T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2018/technologies-learned-as-a-software-engineer/","section":"posts","summary":"作为一名软件工程师，我总是对学习各类新技术抱有极大热情。我会在这篇文章用列表来记录作为一名软件工程师的我已经开始学习的或者在余生计划要学习的技术。\n注: 这篇文章会随着我学习它们一直更新\n我是如何区分我对一项技术的掌握水平:\n ⭒⭒⭒⭒⭒ (外行) - 尚无了解\n ⭑⭒⭒⭒⭒ (新手) - 了解基本原理和概念\n ⭑⭑⭒⭒⭒ (入门) - 通过学习课程和实验掌握了部分经验\n ⭑⭑⭑⭒⭒ (熟悉) - 可以使用该技术进行实践并了解如何权衡利弊\n ⭑⭑⭑⭑⭒ (精通) - 能在生产环境独立应用该技术\n ⭑⭑⭑⭑⭑ (专家) - 被认可为专家，可以向他人提供指导\n  Web开发  React: ⭑⭑⭑⭒⭒\n Angular: ⭑⭑⭒⭒⭒\n Node.js: ⭑⭑⭑⭒⭒\n Spring Boot: ⭑⭑⭑⭒⭒\n HTML \u0026amp; CSS: ⭑⭑⭑⭑⭒\n REST API: ⭑⭑⭑⭑⭑\n Webpack: ⭑⭑⭑⭒⭒\n Go: ⭒⭒⭒⭒⭒\n Puppeteer: ⭑⭑⭑⭒⭒\n  移动开发  iOS (Swift): ⭑⭑⭒⭒⭒","tags":null,"title":"作为软件工程师需要掌握的技能","type":"posts","url":"/zh/posts/2018/technologies-learned-as-a-software-engineer/","weight":0,"wordcount":106},{"authors":null,"categories":null,"date":1539561600,"description":"","dir":"posts/2018/embed-google-analytics-dashboard-on-website/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":[],"kind":"page","lang":"en","lastmod":1539561600,"objectID":"da1c5d1cd003bc3e9e978d3541bed886","permalink":"https://tonyxu.io/posts/2018/embed-google-analytics-dashboard-on-website/","publishdate":"2018-10-15T00:00:00Z","readingtime":3,"relpermalink":"/posts/2018/embed-google-analytics-dashboard-on-website/","section":"posts","summary":"\u003cp\u003eIf you are using Google Analytics to analyze site traffic, you might want to embed those amazing dashboards to your website publicly. While Google doesn\u0026rsquo;t provide iframe solution, it does offer a \u003ca href=\"https://developers.google.com/analytics/devguides/reporting/embed/v1/\" target=\"_blank\"\u003eGoogle Analytics Embed API\u003c/a\u003e which requires a bit more technical knowledge. I\u0026rsquo;ll walk you through each and every step and make sure you don\u0026rsquo;t have to read all developer documentation and can easily build dashboard\u003c/p\u003e\n\n\u003cp\u003ePreview:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"./Analytics_-_Tony_Xu_2018-10-16_09-52-42.png\" alt=\"preview\" /\u003e\u003c/p\u003e","tags":null,"title":"Embed Google Analytics Dashboard on Website","type":"posts","url":"/posts/2018/embed-google-analytics-dashboard-on-website/","weight":0,"wordcount":451},{"authors":null,"categories":null,"date":1539561600,"description":"","dir":"posts/2018/embed-google-analytics-dashboard-on-website/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":[],"kind":"page","lang":"zh","lastmod":1539561600,"objectID":"549c44ed7963899b132c55f38cc3a9a7","permalink":"https://tonyxu.io/zh/posts/2018/embed-google-analytics-dashboard-on-website/","publishdate":"2018-10-15T00:00:00Z","readingtime":2,"relpermalink":"/zh/posts/2018/embed-google-analytics-dashboard-on-website/","section":"posts","summary":"如果你正在使用Google Anlaytics工具来分析网站访问数据，你可能会想将它提供的各种酷炫图表嵌入到网站页面以供用户浏览。尽管Google Analytics并不提供简单的iframe方式来嵌入图表，它还是提供了Google Analytics Embed API这种需要稍微多一点技术基础的方式让你能够嵌入它们的图表。我会在这篇文章里详细地告诉你该如何一步一步实现一个Google Analytics图表\n效果预览:\n1. 在Google Developers Console创建云项目 (如果你已经有项目了请忽略这一步)\n2. 创建服务账号(service account)并下载.json密钥文件 3. 启用Google Analytics API权限 4. 允许云服务账号(service account)访问Google Analytics数据 获取云服务账号邮箱地址\n添加为Google Analytics只读用户\n5. 在服务器生成访问令牌(access token) 我们在服务器生成访问令牌并返回给前端，因此用户不需要在浏览器登录Google获取访问令牌。\nNode.js服务器部分实现 Install Google API Client Library\nnpm install --save googleapis Import service account key\nlet privateKey = require(\u0026#34;./google_key.json\u0026#34;);  Return Google access token to client\n// https://your-domain/accessTokens 将会返回Google访问令牌给前段 app.get(\u0026#34;/accessTokens\u0026#34;, (req,res) =\u0026gt; { let {google} = require(\u0026#39;googleapis\u0026#39;); let privateKey = require(\u0026#34;.","tags":null,"title":"嵌入Google Analytics图表到你的网站","type":"posts","url":"/zh/posts/2018/embed-google-analytics-dashboard-on-website/","weight":0,"wordcount":267},{"authors":null,"categories":null,"date":1533600000,"description":"","dir":"posts/2018/use-firebase-cloud-function-to-count-website-visitors/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":[],"kind":"page","lang":"en","lastmod":1533600000,"objectID":"8d963a589913833edceedd59b5bf5ae1","permalink":"https://tonyxu.io/posts/2018/use-firebase-cloud-function-to-count-website-visitors/","publishdate":"2018-08-07T00:00:00Z","readingtime":3,"relpermalink":"/posts/2018/use-firebase-cloud-function-to-count-website-visitors/","section":"posts","summary":"It\u0026rsquo;s getting popular to use Firebase hosting to host static website, however, you might not know you can still have server-side code hosted in Firebase for your static website, and that is the Firebase Cloud Function. Once of the case you might want to use the Cloud Function is to write something to Firebase database, for example, a hit counter. In this topic, I\u0026rsquo;ll show you how to use Firebase Cloud Function and Firebase Realtime Database to count website visitor.","tags":null,"title":"Use Firebase Cloud Function to Count Website Visitors","type":"posts","url":"/posts/2018/use-firebase-cloud-function-to-count-website-visitors/","weight":0,"wordcount":447},{"authors":null,"categories":null,"date":1533600000,"description":"","dir":"posts/2018/use-firebase-cloud-function-to-count-website-visitors/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":1533600000,"objectID":"845229bf56f3df951b2cbc32f7e59328","permalink":"https://tonyxu.io/zh/posts/2018/use-firebase-cloud-function-to-count-website-visitors/","publishdate":"2018-08-07T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2018/use-firebase-cloud-function-to-count-website-visitors/","section":"posts","summary":"现在越来越多人喜欢用 Firebase 托管静态页面，类似选择还有 GitHub Pages。如果你想给 Firebase 托管的静态页面添加后端代码，那么恭喜你云函数就是为你准备的。其中使用云函数的场景可以是连接 Firebase 实时数据库并存取数据。\n我在这给大家分享一个最简单的例子就是借助云函数实现访问统计，每次云函数被触发，就更新实时数据库里的网站访问统计。\n计划 我们大致需要这么几步实现这个功能\n 部署静态页面至 Firebase 云托管\n 创建 Firebase 云函数用来更新 Firebase 实时数据库的统计数字\n 为静态页面添加访问云函数的请求\n  部署静态页面至 Firebase 云托管 Firebase 云托管非常适合托管静态页面，它比 GitHub Pages 搭建起来更简单，同时它也提供更多为网站/移动开发而设计的功能。如果你的静态网页文件已经准备好了，那么就可以直接运行firebase deploy上传至 Firebase 并可以在全球任意地方访问。\n参考Quickstart学习如何在 Firebase 部署你的第一个静态网站\n创建 Firebase 云函数 现在，我们来创建 Firebase 云函数来执行后端代码处理统计数字的更新。在这段代码中，我们将云函数连接实时数据库，并让它能够更新存储在数据库里的统计数字。\n 初始化云函数\nfirebase init functions 在实时数据库创建hit_counter节点并把值设为 0\n{ \u0026#34;hit_counter\u0026#34;: 0 } 编辑云函数代码 (Index.js)\nconst functions = require(\u0026#34;firebase-functions\u0026#34;); const admin = require(\u0026#34;firebase-admin\u0026#34;); admin.initializeApp(); exports.hitCounter = functions.","tags":null,"title":"使用Firebase云函数统计网站访问数","type":"posts","url":"/zh/posts/2018/use-firebase-cloud-function-to-count-website-visitors/","weight":0,"wordcount":99},{"authors":null,"categories":null,"date":1533254400,"description":"","dir":"posts/2018/customize-chrome-new-tab-page/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":[],"kind":"page","lang":"en","lastmod":1533254400,"objectID":"435d9b9cd8abeaea35e2fff0472e3713","permalink":"https://tonyxu.io/posts/2018/customize-chrome-new-tab-page/","publishdate":"2018-08-03T00:00:00Z","readingtime":2,"relpermalink":"/posts/2018/customize-chrome-new-tab-page/","section":"posts","summary":"Have you thought about customizing Chrome new tab page? If so, you must have tried the extensions in Chrome web store to customize your new tab page. If you are not satisfied with any of them, you have the option to build your own new tab page that meets all your expectations.\nChrome extension file structure └── chrome-extention //You project directory ├── manifest.json //Chrome extension manifest └── newTab.html //Chrome extension new tab html page Create Chrome extension manifest Create a folder as the project folder for Chrome extension.","tags":null,"title":"Customize Chrome New Tab Page","type":"posts","url":"/posts/2018/customize-chrome-new-tab-page/","weight":0,"wordcount":391},{"authors":null,"categories":null,"date":1533254400,"description":"","dir":"posts/2018/customize-chrome-new-tab-page/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":[],"kind":"page","lang":"zh","lastmod":1533254400,"objectID":"5802aec4e190281138cbf9084fe0f4dc","permalink":"https://tonyxu.io/zh/posts/2018/customize-chrome-new-tab-page/","publishdate":"2018-08-03T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2018/customize-chrome-new-tab-page/","section":"posts","summary":"有没有想过改造Chrome的默认新标签页? 如果有，我相信你肯定尝试过去Chrome应用商店下载一些拓展来定制新标签页。如果你觉得无论是默认，还是第三方提供的新标签页都无法满足你的需求，我建议你跟着我尝试自己制作一款Chrome拓展来定制你的新标签页。\n拓展插件目录结构 └── chrome-extention //你的Chrome拓展项目目录 ├── manifest.json //Chrome拓展描述文件 └── newTab.html //Chrome拓展新标签页页面文件 创建Chrome拓展描述文件 创建一个文件夹，作为Chrome拓展的项目文件夹。在文件夹内创建manifest.json描述文件如下:\n{ \u0026#34;name\u0026#34;: \u0026#34;Chrome extension name here.\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;manifest_version\u0026#34;: 2, \u0026#34;description\u0026#34;: \u0026#34;Chrome extension description written here.\u0026#34;, \u0026#34;chrome_url_overrides\u0026#34; : { \u0026#34;newtab\u0026#34;: \u0026#34;newTab.html\u0026#34; }, \u0026#34;content_security_policy\u0026#34;: \u0026#34;script-src \u0026#39;self\u0026#39;; object-src \u0026#39;self\u0026#39;\u0026#34; } 创建自定义新标签页面 在Chrome拓展项目文件夹内创建newTab.html文件，这个文件就是你即将替换为新标签页的网页文件。如果你对HTML/CSS并不熟悉，可以仿照我的写法，把新标签页制作成如下所示的网址导航。\nnewTab.html参考源码:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;title\u0026gt;New Tab\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;section class=\u0026#34;section\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;title\u0026#34;\u0026gt; Hello Tony! \u0026lt;/h1\u0026gt; \u0026lt;br\u0026gt; \u0026lt;p class=\u0026#34;subtitle\u0026#34;\u0026gt; Resources \u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;columns\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;column\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;menu\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;heading\u0026#34;\u0026gt;Company Resource\u0026lt;/p\u0026gt; \u0026lt;ul class=\u0026#34;menu-list\u0026#34;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;All Hands\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Helpin\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Book Room\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Inlife\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;column\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;menu\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;heading\u0026#34;\u0026gt;Tech Resource\u0026lt;/p\u0026gt; \u0026lt;ul class=\u0026#34;menu-list\u0026#34;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Fast Access\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Git\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;column\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;menu\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;heading\u0026#34;\u0026gt;Team Resource\u0026lt;/p\u0026gt; \u0026lt;ul class=\u0026#34;menu-list\u0026#34;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Sprint Board\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Zendesk\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;column\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;menu\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;heading\u0026#34;\u0026gt;Docs\u0026lt;/p\u0026gt; \u0026lt;ul class=\u0026#34;menu-list\u0026#34;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;https://docs.","tags":null,"title":"自己 DIY Chrome浏览器的新标签页","type":"posts","url":"/zh/posts/2018/customize-chrome-new-tab-page/","weight":0,"wordcount":196},{"authors":null,"categories":null,"date":1533081600,"description":"","dir":"posts/2018/http-deprecate-x-prefix/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":1533081600,"objectID":"eff71980a4924f451a3863367be0ce5f","permalink":"https://tonyxu.io/zh/posts/2018/http-deprecate-x-prefix/","publishdate":"2018-08-01T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2018/http-deprecate-x-prefix/","section":"posts","summary":" 2012年6月，互联网工程任务小组(IETF)发布了新的征求意见稿(RFC-6648)，要求自定义HTTP头字段应放弃使用X-前缀。由于我所在的LinkedIn也在使用这类自定义头字段，因此特意阅读了这份征求意见稿，给大家解释以下为什么我们需要弃用它。\nX前缀诞生背景 HTTP头的作用是为了让客户端和服务器传送信息时能够附加一些额外信息。\nHTTP Header（HTTP头) 有一些标准字段，如:\n Authorization: 常用于传OAuth的Access Token或其他认证信息, 如Authorization: Bearer ABCDEFG\n Content-Type: 常用于表明Request Body 请求体的多媒体类型, 如application/x-www-form-urlencoded或application/json)\n User-Agent: 浏览器标识符, 如Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36\n  如果想在HTTP头里添加自定义的字段，为了和标准字段区分，之前是建议加上X-前缀的(X代表Extension)。这个建议是在1982年为Email标准提出(参考RFC-822)，行之有效了几十年。\nX前缀的使用 在众多非标准HTTP头中，有一些变得越来越普遍，如:\n X-Forwarded-For: 标记通过代理访问服务器的原始客户端IP地址\n X-Forwarded-Host: 标记通过代理访问服务器的原始客户端Host名\n X-Forwarded-Proto: 标记原始客户端通过代理访问服务器时用的协议\n X-Powered-By: 标记框架、技术、环境等\n  X前缀的问题 这些带X-前缀的HTTP头变得越来越普遍后，当需要把他们标准化时，如何处理这个X-前缀就变得比较棘手。按理说标准化HTTP头后应该拿掉X-前缀，但是拿掉后显然会对一些依赖原来HTTP头的程序造成影响。为了保证兼容性，我们无法彻底拿掉X-前缀。总结来说，使用X-前缀本意是区分标准化和自定义HTTP头，但是却越来越无法达到这一目标。\n解决方案  不再建议新自定义HTTP头采用X-前缀，X-前缀也不再作为标准与非标准的标记\n 如果新的自定义HTTP头有可能被标准化，则选取当前未被占用的有意义的HTTP头字段名\n 如果新的自定义HTTP头不可能被标准化，完全是私有HTTP头，则建议包含组织名(如反域名com.example.foo)\n 已有的自定义HTTP头，保留使用或者放弃使用都可，不做推荐\n 是否包含X-前缀不能作为HTTP头是否安全的判断因素\n  ","tags":null,"title":"HTTP头字段为何要弃用X前缀","type":"posts","url":"/zh/posts/2018/http-deprecate-x-prefix/","weight":0,"wordcount":51},{"authors":null,"categories":null,"date":1533081600,"description":"","dir":"posts/2018/http-deprecate-x-prefix/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":[],"kind":"page","lang":"en","lastmod":1533081600,"objectID":"354a2c760bf2a0db6bb7999e89633493","permalink":"https://tonyxu.io/posts/2018/http-deprecate-x-prefix/","publishdate":"2018-08-01T00:00:00Z","readingtime":2,"relpermalink":"/posts/2018/http-deprecate-x-prefix/","section":"posts","summary":"In June, 2012, Internet Engineering Task Force released a new RFC(RFC-6648), recommending deprecation of X- prefix. As LinkedIn also use this type of prefix, I was interested to read this RFC, and explain to you why we need to deprecate it.\nX- prefix background HTTP header is used to transmit additional information between client and server.\nSome standard HTTP header:\n Authorization: Often used to transmit OAuth access token or other authorization information.","tags":null,"title":"Why we need to deprecate x prefix for HTTP headers?","type":"posts","url":"/posts/2018/http-deprecate-x-prefix/","weight":0,"wordcount":323},{"authors":null,"categories":null,"date":1532736000,"description":"","dir":"posts/2018/write-script-to-scrap-house-rental-price/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":[],"kind":"page","lang":"en","lastmod":1532736000,"objectID":"4606efb6d28eac31031d58452e99b0bb","permalink":"https://tonyxu.io/posts/2018/write-script-to-scrap-house-rental-price/","publishdate":"2018-07-28T00:00:00Z","readingtime":2,"relpermalink":"/posts/2018/write-script-to-scrap-house-rental-price/","section":"posts","summary":"House rental is a critical thing if you are living in the silicon valley. I\u0026rsquo;m planning to move to a new apartment, but the price changes often. I want to monitor the price and book it when it drops. In order to do that, I wrote a script to monitor the house rental price and push the result to my phone like below.\nGet Started The apartment I\u0026rsquo;m looking at is a professional rental apartment, to not disclose the place I will be living in, I\u0026rsquo;m using another one for example.","tags":null,"title":"Write script to scrap house rent price and send to your phone","type":"posts","url":"/posts/2018/write-script-to-scrap-house-rental-price/","weight":0,"wordcount":364},{"authors":null,"categories":null,"date":1532736000,"description":"","dir":"posts/2018/write-script-to-scrap-house-rental-price/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":1532736000,"objectID":"22cb2a9d22095b926df3a8c49b67f540","permalink":"https://tonyxu.io/zh/posts/2018/write-script-to-scrap-house-rental-price/","publishdate":"2018-07-28T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2018/write-script-to-scrap-house-rental-price/","section":"posts","summary":"在硅谷生活工作，租房是一个很重要的事情。在硅谷或者美国其他地方租房，很多人像我一样选择专门的出租公寓，这种公寓只租不卖，经营也比较专业化。大部分出租公寓会有官网可以查询价格/空房，并且可以在线签约，规模小一些的出租公寓可能就没有官网，租房信息只挂在第三方租房网站上。由于我和女票一个刚换新公司，一个即将要去新公司，因此物色好了一处公寓，准备过几个月入住。由于这处公寓的在线价格每天都在变化，因此自己写了一个脚本每天查询所有可供签约的房间价格和其他信息并推送到手机，以供参考。下面记录了一些我实现的过程。\n简介 这家公寓是个专业连锁出租公寓，为了避免暴露我的住址，以下均以其旗下另一处出租公寓举例。\n这家连锁公寓的官网是:\nhttps://www.avaloncommunities.com/california/mountain-view-apartments/avalon-mountain-view/floor-plans\n官网价格区截图:\n分析 为了每天能自动接收这座公寓的价格信息，这个脚本大概需要做如下几件事:\n 脚本自动抓取所有待租公寓房间的价格、大小、入住日期、及其他重要信息\n 提取如上信息拼接消息文本，并发送给自己(我通过Telegram Bot给自己推送消息来接收通知, 参考另一篇文章:利用Telegram和Flask打造私人通知服务器)\n  实现 一开始我准备用爬虫爬网页文本，并分析文本提取价格信息。但是转念一想我应该先查看网站是不是自己有API提供这些信息给前端，打开Chrome Inspect网络，发现确实有这个API通过GET请求获取这些信息。为了确保这个API不需要鉴权一类验证，我复制API网址在隐身窗口打开，同样可以拿到数据。因此实现方法应该是让脚本发一个GET请求触发推送出租信息。\nChrome Inspector\u0008:\n经过仔细研究后，发现这个获取租房信息的GET请求本身还支持一些参数，如最低价格，最高价格，预期入住日期等。\n接下来就是代码实现了，因为我已经有一个python Flask app跑在Google App Engine上，因此就基于之前的app加了一段代码，通过url(如 http://example.com/housing )访问触发脚本执行。定时发送请求触发脚本的方法请参阅用GitLab-CI免费运行定时任务\n代码 Flask脚本片段 @app.route(\u0026#39;/housing\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def housing(): houseResponse = json.loads(urlfetch.fetch(url=\u0026#39;https://api.avalonbay.com/json/reply/ApartmentSearch?communityCode=CA049\u0026amp;min=2000\u0026amp;max=3000\u0026amp;desiredMoveInDate=2018-09-01T07:00:00.000Z\u0026#39;).content) availableFloorPlans = houseResponse[\u0026#34;results\u0026#34;][\u0026#34;availableFloorPlanTypes\u0026#34;][0][\u0026#34;availableFloorPlans\u0026#34;] responseText = \u0026#34;*House Quotes:*%0A\u0026#34; for availableFloorPlan in availableFloorPlans: for apartment in availableFloorPlan[\u0026#34;finishPackages\u0026#34;][0][\u0026#34;apartments\u0026#34;]: responseText += \u0026#34;Size:\u0026#34; + str(apartment[\u0026#34;apartmentSize\u0026#34;]) + \u0026#34; Price:\u0026#34; + str(apartment[\u0026#34;pricing\u0026#34;][\u0026#34;effectiveRent\u0026#34;]) + \u0026#34; Floor:\u0026#34; + str(apartment[\u0026#34;floor\u0026#34;]) + \u0026#34; Date:\u0026#34; + time.","tags":null,"title":"自己写脚本每日爬取租房价格推送到手机","type":"posts","url":"/zh/posts/2018/write-script-to-scrap-house-rental-price/","weight":0,"wordcount":93},{"authors":null,"categories":null,"date":1532563200,"description":"","dir":"posts/2018/ultimate-way-to-beautify-mac-terminal-and-recommendations-for-plugins/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":[],"kind":"page","lang":"en","lastmod":1532563200,"objectID":"2c88aba0b7c2293e2f2a976be47c8311","permalink":"https://tonyxu.io/posts/2018/ultimate-way-to-beautify-mac-terminal-and-recommendations-for-plugins/","publishdate":"2018-07-26T00:00:00Z","readingtime":2,"relpermalink":"/posts/2018/ultimate-way-to-beautify-mac-terminal-and-recommendations-for-plugins/","section":"posts","summary":"If you are using Mac as development machine, Terminal.app must be one of the most used apps. Terminal might be not fancy to begin with, but you can totally make it more elegant and fancy if you follow with me.\nWe will be doing these for our Terminal  Install Terminal Profile: Customize Terminal Color\n Install oh-my-zsh: Use powerful zsh for Terminal, instead of shell\n Install oh-my-zsh themes: Beautify oh-my-zsh","tags":null,"title":"Ultimate way to beautify Mac terminal (oh-my-zsh) and plugin recommendations","type":"posts","url":"/posts/2018/ultimate-way-to-beautify-mac-terminal-and-recommendations-for-plugins/","weight":0,"wordcount":410},{"authors":null,"categories":null,"date":1532563200,"description":"","dir":"posts/2018/ultimate-way-to-beautify-mac-terminal-and-recommendations-for-plugins/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":[],"kind":"page","lang":"zh","lastmod":1532563200,"objectID":"399747fe87bf83b68c0c129f531cf23d","permalink":"https://tonyxu.io/zh/posts/2018/ultimate-way-to-beautify-mac-terminal-and-recommendations-for-plugins/","publishdate":"2018-07-26T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2018/ultimate-way-to-beautify-mac-terminal-and-recommendations-for-plugins/","section":"posts","summary":"如果你使用Mac进行开发，那么Terminal.app应该是你使用非常频繁的app了。初体验Terminal时你可能觉得单调乏味，阅读密密麻麻的内容也很费劲。但是如果你跟着我一起配置它，就会发现你平时觉得繁琐，不方便的地方其实都可以被完美解决,并且颜值也高了许多。\n我们准备这样改造Terminal  修改Terminal的Profile: 让Terminal配色更美观\n 安装oh-my-zsh: 将Terminal的shell从bash改成更强大的zsh\n 安装oh-my-zsh主题: 美化oh-my-zsh\n 安装oh-my-zsh必备插件: 让Terminal具有更高级和便利的功能\n  准备工作 建议先安装homebrew, 方便后续工具安装:\n/usr/bin/ruby -e \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026#34; 修改Terminal Profile 主题设置  在GitHub的osx-terminal-theme项目主页里寻找你喜欢的主题\n 在schemes目录里找到对应的主题文件并双击安装到Terminal, 设置为默认\n  安装oh-my-zsh 先安装zsh:\nbrew install zsh 再安装oh-my-zsh:\nsh -c \u0026#34;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\u0026#34; 安装oh-my-zsh主题 内置主题列表 oh-my-zsh提供一批内置主题，可以直接设置使用\n 在内置主题列表寻找你你喜欢的主题: https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\n 在~/.zshrc配置文件里设置ZSH_THEME为你的主题名称\n 激活设置source ~/.zshrc\n  第三方主题列表 许多第三方也开发了供oh-my-zsh使用的主题，可以去第三方主题列表查看和安装:\nhttps://github.com/robbyrussell/oh-my-zsh/wiki/External-themes\n安装oh-my-zsh必备插件 oh-my-zsh有非常丰富的插件可供使用，下面列举一些必备插件，可以大幅提高生产力。\n示例如下:\n# ~/.zshrc: plugins=( git zsh-syntax-highlighting ) git 自带插件，可以使用缩写命令, 比如 gaa -\u0026gt; git add --all, 通过alias | grep git查看所有支持缩写命令","tags":null,"title":"程序员的Mac终端(oh-my-zsh)终极美化及必备插件推荐","type":"posts","url":"/zh/posts/2018/ultimate-way-to-beautify-mac-terminal-and-recommendations-for-plugins/","weight":0,"wordcount":186},{"authors":null,"categories":null,"date":1532390400,"description":"","dir":"posts/2018/oauth2-pkce-flow/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":[],"kind":"page","lang":"en","lastmod":1532390400,"objectID":"a763f9ea688a66c5cc212bf4b43e4e39","permalink":"https://tonyxu.io/posts/2018/oauth2-pkce-flow/","publishdate":"2018-07-24T00:00:00Z","readingtime":3,"relpermalink":"/posts/2018/oauth2-pkce-flow/","section":"posts","summary":"If you are building a native application, and you need OAuth 2.0, PKCE OAuth is your best choice. Here I will explain why.\nNative application is often used to refer to native application that has no back-end, and running totally in user\u0026rsquo;s devices such as Windows, Mac, iOS, and Android, where securely storing secrets is impossible.\nWhat are the OAuth 2 options for those native applications and what are the pros and cons for them?","tags":null,"title":"The OAuth2 flow for native apps: PKCE","type":"posts","url":"/posts/2018/oauth2-pkce-flow/","weight":0,"wordcount":553},{"authors":null,"categories":null,"date":1532390400,"description":"","dir":"posts/2018/oauth2-pkce-flow/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":[],"kind":"page","lang":"zh","lastmod":1532390400,"objectID":"eb84300324f85b4d2cf1de1bfed73937","permalink":"https://tonyxu.io/zh/posts/2018/oauth2-pkce-flow/","publishdate":"2018-07-24T00:00:00Z","readingtime":2,"relpermalink":"/zh/posts/2018/oauth2-pkce-flow/","section":"posts","summary":"如果你正在做一款原生客户端软件，同时你又需要用到OAuth2.0登陆，那么使用OAuth2.0带PKCE支持的授权码模式是你的最佳选择。下面我就和大家分享一下带PKCE的授权码模式为什么最适合原生客户端。\n原生客户端软件一般是指没有后端服务器，所有代码都在用户本地设备上运行的软件（如Windows/Mac客户端或者iOS/Android客户端)，因此想让原生客户端软件安全存放密钥(client secret)是不现实的，很容易被破解。\n那么原生客户端如果需要使用OAuth有哪些选择，这些选择又有哪些利弊呢？\n 简化模式(Implicit Flow): 简化模式的Access Token会直接被传递给Redirect URL。假如你的原生客户端是跳转其他浏览器进行登陆授权，那么你要么是绑定URL Scheme通过类似app-name://?access_token=的方法把access token传递给原生客户端，要么是在本地起个HTTP服务器通过http://localhost:{port}/?access_token=的方法监听Access Token。这两种方式都有被第三方恶意应用占用URL Scheme或者localhost端口截取Access Token的风险，且Access Token过期无法更新，不建议使用。\n 授权码模式(Authorization Code Flow): 授权码模式的Access Token不会被直接传递给Redirect URL，Redirect URL只会接收一个授权码，且授权码必须要和Client ID，Client Secret一同使用才能获取Access Token。然而原生客户端无法安全保存Client Secret，第三方恶意应用可以破解Client Secret，并按上述方法截取Authorization Code，同样不建议使用。有的认证提供商针对原生客户端允许不提供Client Secret获取Access Token，这其实并没有解决根本问题。\n  上面两种方法都被否决了，那么怎么才能让原生客户端安全使用OAuth2.0认证呢？答案就是使用带有PKCE支持的授权码模式。\nPKCE, 全称Proof Key for Code Exchange, 微软翻译为保护授权代码授权。这其实是通过一种密码学手段确保恶意第三方即使截获Authorization Code或者其他密钥，也无法向认证服务器交换Access Token。\nPKCE的流程大概如下:\n 随机生成一串字符并作URL-Safe的Base64编码处理, 结果用作code_verifier\n 将这串字符通过SHA256哈希，并用URL-Safe的Base64编码处理，结果用作code_challenge\n 把code_challenge带上，跳转认证服务器，获取Authorization Code\n 把code_verifier带上，换取Access Token\n  由于中间人不能由code_challenge逆推code_verifier，只有客户端自己才知道这两个值。因此即使中间人截获了code_challenge, Authorization Code等，也无法换取Access Token, 避免了安全问题。\n在线生成 PKCE Code Verifier and Code Challenge https://tonyxu-io.","tags":null,"title":"为客户端而生的OAuth2.0协议之PKCE授权码模式","type":"posts","url":"/zh/posts/2018/oauth2-pkce-flow/","weight":0,"wordcount":229},{"authors":null,"categories":null,"date":1532304000,"description":"","dir":"posts/2018/use-gitlab-ci-to-run-free-scheduled-jobs/","expirydate":-62135596800,"fuzzywordcount":500,"keywords":[],"kind":"page","lang":"en","lastmod":1532304000,"objectID":"b187dae9cbea38b0c3bbed9041fde6ba","permalink":"https://tonyxu.io/posts/2018/use-gitlab-ci-to-run-free-scheduled-jobs/","publishdate":"2018-07-23T00:00:00Z","readingtime":3,"relpermalink":"/posts/2018/use-gitlab-ci-to-run-free-scheduled-jobs/","section":"posts","summary":"In this topic, I\u0026rsquo;ll introduce how to run scheduled job with GitLab-CI, without the need to have a server running cron job or other application.\nGitLab-CI is a continuous integration/deployment tool, it will trigger some scripts (such as build, test, deployment) when there is new deployment or defined interval. GitLab-CI has a free quota of 2,000 minutes running time, which is 1 hour everyday.\nIf you prefer GitHub than GitLab, Travis CI also offers similar tool for free.","tags":null,"title":"Use GitLab-CI to run free scheduled jobs","type":"posts","url":"/posts/2018/use-gitlab-ci-to-run-free-scheduled-jobs/","weight":0,"wordcount":451},{"authors":null,"categories":null,"date":1532304000,"description":"","dir":"posts/2018/use-gitlab-ci-to-run-free-scheduled-jobs/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":[],"kind":"page","lang":"zh","lastmod":1532304000,"objectID":"fa8ebfdd88fb1dc14b7f1894a9307499","permalink":"https://tonyxu.io/zh/posts/2018/use-gitlab-ci-to-run-free-scheduled-jobs/","publishdate":"2018-07-23T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2018/use-gitlab-ci-to-run-free-scheduled-jobs/","section":"posts","summary":"本文介绍我是如何使用GitLab-CI免费地运行一些需要定时执行的脚本，而不需要在本地/服务器上使用cron job或者一直跑一个后台程序运行中间sleep。\nGitLab-CI是GitLab提供的持续集成/部署的工具。当有新代码提交或者其他条件触发时，它就会自动运行脚本执行编译、测试、部署等活动。GitLab-CI每个月提供2,000分钟的免费运行时间，平均一天可以大概跑一个小时。\n如果你不用GitLab而是用GitHub的话，Travis CI也免费提供类似功能。\nGitLab-CI 和 Travis CI都支持\u0008定时执行脚本，但是GitLab-CI最多可以支持每小时运行一次，而Travis只支持最多每天运行一次。\n那么什么情况下你会需要定试运行脚本呢？比如:\n 我需要一个脚本每隔一段时间去查询当前比特币价格，当高于指定价格时卖出或者提醒我\n 我需要一个脚本每隔一段时间查询一个商品的价格，当低于制定价格时提醒我购买\n 我需要一个脚本每隔一段时间访问一次某个网址（例如为了保持Heroku\u0008应用处于激活状态)\n  下面为了方便起见，我就以情况3举例。\n首先在你的repo目录创建一个.gitlab-ci.yml文件:\ntest:script:-bashscripts/script_a.sh 上述示例定义了一个test任务，并指定了用bash执行scripts目录下的script_a.sh脚本文件\n接下来就在scripts目录下创建一个script_a.sh文件:\n#!/bin/sh curl curl http://ip-api.com/json  注: job名，脚本目录，脚本名，脚本内容都可以根据具体需要修改，这里只是举例。\n 将包含.gitlab-ci.yml和脚本的代码上传至GitLab，即会自动触发任务，去GitLab管理界面左侧的CI/CD - Jobs可以查看任务状态。\n进入CI/CD - Schedules可以给任务设置定时，默认提供每天/每周/每月，或者自定义。自定义的设置语法格式和cron一样，不熟悉的可以去 https://crontab.guru 调试。假如你设置* * * * 1-5就是每周一到周五每分钟都运行，但是GitLab\u0008貌似有限制，导致实际上只会每周一到周五每小时执行一次。\n接下来你的脚本就会按照你设置的时间定时执行了。\n如果你去CI/CD - Jobs查看运行日志，可以看到类似如下日志:\nRunning with gitlab-runner 11.1.0 (081978aa) on docker-auto-scale 0277ea0f Using Docker executor with image ruby:2.5 ... Pulling docker image ruby:2.5 ... Using docker image sha256:1d8640b852eb145393da754ec38a4153edcf473a249448b7a271cea5f06016fa for ruby:2.","tags":null,"title":"用GitLab-CI免费运行定时任务","type":"posts","url":"/zh/posts/2018/use-gitlab-ci-to-run-free-scheduled-jobs/","weight":0,"wordcount":150},{"authors":null,"categories":null,"date":1532217600,"description":"","dir":"posts/2018/use-icomoon-to-reduce-fontawesome-size/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":[],"kind":"page","lang":"en","lastmod":1532217600,"objectID":"0ac6b5657feab08e2a45d7adbe7203ff","permalink":"https://tonyxu.io/posts/2018/use-icomoon-to-reduce-fontawesome-size/","publishdate":"2018-07-22T00:00:00Z","readingtime":1,"relpermalink":"/posts/2018/use-icomoon-to-reduce-fontawesome-size/","section":"posts","summary":"FontAwesome is an awesome font library. With fontawesome, it will be super easy to inject icon into your html page. Although the default method is very simple, it has the drawback of taking too much load by loading full set of icons.\nIn this article, I\u0026rsquo;ll share how I reduce the fontawesome library size by using IcoMoon to generate icon library that only has what I need.\nFontAwesome Default Usage  Include FontAwesome Icon Library:","tags":null,"title":"Use IcoMoon to reduce 98% FontAwesome load size","type":"posts","url":"/posts/2018/use-icomoon-to-reduce-fontawesome-size/","weight":0,"wordcount":206},{"authors":null,"categories":null,"date":1532217600,"description":"","dir":"posts/2018/use-icomoon-to-reduce-fontawesome-size/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":1532217600,"objectID":"cbd3ff9f65c002b70dd5a227a5b703bb","permalink":"https://tonyxu.io/zh/posts/2018/use-icomoon-to-reduce-fontawesome-size/","publishdate":"2018-07-22T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2018/use-icomoon-to-reduce-fontawesome-size/","section":"posts","summary":"FontAwesome是非常棒的图标字体库，引用了FontAwesome字体库后，仅需要通过HTML标签就可以把图标嵌入你的页面，非常之方便。然而默认使用方法虽然简单，但是会带来一个额外问题，就是加载的资源文件体积过大，如果你的页面本身就比较简单，字体库可能会让你的网页加载大小翻上好几倍。\n下面分享一下我通过使用IcoMoon来生成只含有我需要的图标的图标库文件，瞬间减少大约98%文件大小的方法。\nFontAwesome的默认使用方法  引用FontAwesome图标库:\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://use.fontawesome.com/releases/v5.1.1/css/all.css\u0026#34;\u0026gt; 使用HTML标签嵌入特定图标\n\u0026lt;i class=\u0026#34;fas fa-home\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;  IcoMoon方法  访问IcoMoon主页选择所有你需要使用的图标并点击生成字体(Generate Font)\n 下载资源文件\n 把资源文件中的style.css文件和fonts文件夹复制到你的网站资源文件夹并在HTML页面的\u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;区域引用style.css文件(之前引用的FontAwesome相关资源可以移除了)\n 在示范页面，鼠标移至图标上方，点击 \u0026ldquo;Get Code\u0026rdquo;\n 复制图标嵌入代码，粘贴到你需要展示的HTML位置\n  完成！现在你的网站不再需要加载完整的FontAwesome资源文件，而只是加载你使用的图标资源。\n对比 没有对比就没有伤害，下面附上我个人网站使用上述两种方法的性能对比\n使用IcoMoon 使用FontAwesome默认方法 对比总结 图标字体相关体积减少比例: (132 - 2.4) / 132 = 0.98%, 总资源也从157KB下降到了38.7KB，效果非常之明显!","tags":null,"title":"使用IcoMoon减少98%的FontAwesome字体加载体积","type":"posts","url":"/zh/posts/2018/use-icomoon-to-reduce-fontawesome-size/","weight":0,"wordcount":35},{"authors":null,"categories":null,"date":1532131200,"description":"","dir":"posts/2018/be-prepared-for-your-next-job/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":[],"kind":"page","lang":"en","lastmod":1532131200,"objectID":"eb48ffbc65bc09b29fdf5c65db8bb2e3","permalink":"https://tonyxu.io/posts/2018/be-prepared-for-your-next-job/","publishdate":"2018-07-21T00:00:00Z","readingtime":4,"relpermalink":"/posts/2018/be-prepared-for-your-next-job/","section":"posts","summary":"This is a presentation shared in DBL retreat. I posted content here for everyone to take a look.\n Thanks for reading this blog. In this blog I want to share my personal experience on changing my job and some of my thinking that might be helpful for you. I\u0026rsquo;ll keep this blog in high level, and will not talk about job seeking skills, etc.\nI will talk about:","tags":null,"title":"Be prepared for your next job","type":"posts","url":"/posts/2018/be-prepared-for-your-next-job/","weight":0,"wordcount":675},{"authors":null,"categories":null,"date":1532131200,"description":"","dir":"posts/2018/be-prepared-for-your-next-job/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":1532131200,"objectID":"dc6f500f94412f3a7b262e40283feeb3","permalink":"https://tonyxu.io/zh/posts/2018/be-prepared-for-your-next-job/","publishdate":"2018-07-21T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2018/be-prepared-for-your-next-job/","section":"posts","summary":"这篇分享是我在DBL聚会和大家分享的内容，贴在这里以供大家阅读。\n 我想和大家在这篇文章里分享一下我最近跳槽的经历以及我总结的为什么我选择并成功跳槽的原因。我的重点会放在比较抽象的思考，而不是具体的技巧。\n我想分享的话题:\n ✅ 我第一次跳槽\n ✅ 心中永远有一个目标\n ✅ 不要一直留在原地\n ✅ 职业发展\n  不会在文章讨论的话题:\n ❌ 如何写简历\n ❌ 如何准备技术面试\n ❌ 如何获取内推\n ❌ 使用LinkedIn的技巧\n  第一部分: 我的第一次跳槽 我在从密苏里毕业后，以软件工程师的工作加入了一家创业公司Moxtra。你们其中一部分可能知道我在几个月前跳槽去了LinkedIn。当我回想我是为何选择跳槽，又是如何成功跳槽的时候，我总结为以下两点:\n 心中永远有一个目标\n 不要一直留在原地\n  第二部分: 心中永远有一个目标 有句话说得好，当你清楚的知道你想要什么的时候，你就更可能会得到好的结果。我的目标非常简单，就是在一家伟大的公司做一款伟大的产品。这个目标从我小时候就根植在我心里。这个目标也是一直驱使我一路从中国，到美国，再到硅谷的动力。\n老实说，在像Facebook、Google、LinkedIn这样的公司工作就是我的目标，有了这个目标，我在工作中变得更加主动，也慢慢的主动学会了一些之后对我跳槽帮助巨大的技术能力。\n第三部分: 不要一直留在原地 每隔几年换一次工作曾经是在简历上不光彩的事情，但是这已经是过去式了，完全不用担心这个。保持一个工作不变意味着你会越来越依赖于这份工作，而失去了快速跳槽到更好工作的能力。要知道在科技行业，只有少数人会在一个岗位上待超过三至五年，你必须在精神上，财务上，以及技能上准备好每几年换一次工作的能力。\n当然，还有其他原因你必须向前看，当你觉得你每天在重复劳动，或者你做的事情对你下一份工作毫无帮助的时候，你也许应该考虑跳槽。另外，一个最重要的因素，跳槽会大概率让你的工资涨30%到50%，甚至有些人可以翻倍。如果你对赚更多钱有更高追求，你一定已经在考虑了。\n第四部分: 职业发展 还有一个话题我想和大家分享，就是职业发展。一个人一生当中可能会对不同的事情感兴趣，因此你在人生不同的阶段会想从事不同职业，并且一个人基本上不可能一辈子从事一份职业从来不改。有一个话题在科技行业非常火热，就是人们非常担心在他们四五十岁的时候的职业安全问题。我也一样会对这个问题有所担心，如果打算一直从事软件工程师，当我四五十岁的时候要如何跟二三十岁的同事竞争。这虽然是老生常谈，但确实非常多人对此很忧虑。我个人暂时对这个问题没有答案，但我发现以下是几个人们可以考虑的路径:\n 成为一个资深软件工程师\n 持续学习新技术\n 变成特定技术的专家\n  成为技术经理\n 编程特定技术的专家\n 关注团队管理(包括招聘、领导力、团队精神)\n 关注流程、战略、沟通","tags":null,"title":"准备好你的下一份工作","type":"posts","url":"/zh/posts/2018/be-prepared-for-your-next-job/","weight":0,"wordcount":46},{"authors":null,"categories":null,"date":1531785600,"description":"","dir":"posts/2018/tech-stack-for-building-your-own-product/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":[],"kind":"page","lang":"en","lastmod":1531785600,"objectID":"88052aa2430c8ee03277b50ca16dfd91","permalink":"https://tonyxu.io/posts/2018/tech-stack-for-building-your-own-product/","publishdate":"2018-07-17T00:00:00Z","readingtime":1,"relpermalink":"/posts/2018/tech-stack-for-building-your-own-product/","section":"posts","summary":"As a software engineer or developer, you might want to build a product end-to-end. These are the frameworks and technologies you might need. All listed items are open-source or free to use.\nWeb Front-end  Fundamental Language: HTML, JavaScript, CSS\n Advanced Language: ES6, TypeScript, CoffeScript\n JS Library/Framework: React, Vue, Angular, jQuery\n Template Engine: Mustache, Handlebars, Jade\n CSS Library/Framework:\n Global: Bootstrap, Foundation, Semantic\n China: Element, Ant Design, Amaze UI","tags":null,"title":"Tech stack to build your own product","type":"posts","url":"/posts/2018/tech-stack-for-building-your-own-product/","weight":0,"wordcount":200},{"authors":null,"categories":null,"date":1531785600,"description":"","dir":"posts/2018/tech-stack-for-building-your-own-product/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":[],"kind":"page","lang":"zh","lastmod":1531785600,"objectID":"df8d4600fa4d0ad159b51b0a322e796e","permalink":"https://tonyxu.io/zh/posts/2018/tech-stack-for-building-your-own-product/","publishdate":"2018-07-17T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2018/tech-stack-for-building-your-own-product/","section":"posts","summary":"作为一名程序员/开发者，如果你也想自己尝试从头到尾搭建一款互联网产品，那么你可能会用到下面这些技术栈或者技术框架。选取的基本都是开源或者免费使用的，适合个人开发者或者创业公司参考。\n网站前端  基础语言: HTML, JavaScript, CSS\n 衍生语言: ES6, TypeScript, CoffeScript\n JS库/框架: React, Vue, Angular, jQuery\n 模版引擎: Mustache, Handlebars, Jade\n CSS库/框架:\n 全球: Bootstrap, Foundation, Semantic\n 国内: Element, Ant Design, Amaze UI\n 特定框架: Material-UI (React), Angular Material (Angular), iView (Vue)\n  自动化/构建工具: Grunt, Gulp\n 模块化: Browserify, Webpack\n 包管理: npm, bower, yarn\n 代码质量: JSLint, ESLint, TSLint\n 跨平台\n 移动端: React Native, Ionic, MUI","tags":null,"title":"自己搭建互联网产品可能用到的技术栈","type":"posts","url":"/zh/posts/2018/tech-stack-for-building-your-own-product/","weight":0,"wordcount":153},{"authors":null,"categories":null,"date":1531353600,"description":"","dir":"posts/2018/use-telegram-and-flask-to-build-notification-server/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":[],"kind":"page","lang":"en","lastmod":1531353600,"objectID":"8f1cd6e57bdfbb222bd1cf336b5de74a","permalink":"https://tonyxu.io/posts/2018/use-telegram-and-flask-to-build-notification-server/","publishdate":"2018-07-12T00:00:00Z","readingtime":2,"relpermalink":"/posts/2018/use-telegram-and-flask-to-build-notification-server/","section":"posts","summary":"Imagine if you are in these situations:\n I want to notify my girl friend whenver I leave company or arrive home\n I want to get notified when there is new visit to my website\n I want get notified when a scraper or job finished\n  The solution to above situations is a mechanism to send message to your phone programmatically and here is my solution:\nBuild a Flask app to receive GET or POST request, and then compose different messages according to event type and send to some chat channel such as Telegram or Slack.","tags":null,"title":"Use Telegram and Flask to build personal notification server","type":"posts","url":"/posts/2018/use-telegram-and-flask-to-build-notification-server/","weight":0,"wordcount":339},{"authors":null,"categories":null,"date":1531353600,"description":"","dir":"posts/2018/use-telegram-and-flask-to-build-notification-server/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":1531353600,"objectID":"786e07dc3b46028a1cbc9eb76a35508d","permalink":"https://tonyxu.io/zh/posts/2018/use-telegram-and-flask-to-build-notification-server/","publishdate":"2018-07-12T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2018/use-telegram-and-flask-to-build-notification-server/","section":"posts","summary":"假如有如下这么几个场景:\n 每天下班离开公司的时候和到家的时候都希望能自动通知到我的男朋友/女朋友\n 页面有访问时立刻通知自己\n 爬虫或其他任务执行完毕自动通知自己\n  以上场景特别需要一个能够便捷触发并把消息发送到手机上的机制。我的解决方案是：\n实现一个Flask app，接收REST API的GET或者POST请求，根据不同需要拼装消息文本并发送到某个app (如Telegram, Slack等)。这个Flask app可以跑在Google App Engine (免费)， 并绑定自己的域名。\n下面我就介绍一下大概的步骤：\n 根据 Google App Engine 创建一个基本的Flask app\n 去Telegram创建Bot: https://core.telegram.org/bots#3-how-do-i-create-a-bot\n 和Telegram Bot对话，并获取chat id: https://api.telegram.org/bot$TOKEN/getUpdates\n 为Flask创建一个route handle，让它通过如下地址向你的Telegram会话发送消息: https://api.telegram.org/bot$TOKEN/sendMessage?chat_id=12345\u0026amp;text=Hello+World\n 上传到Google App Engine: gcloud app deploy\n  这样你就有了一个Flask app可以接收HTTP Request并根据需要向你的Telegram app发送通知，消息可以是预先准备的也可以是HTTP Request传给Flask app的。\n那么回到开头的几个场景，我们要如何用Flask app解决这几个问题呢？可以针对他们分别尝试:\n 手机上装IFTTT并允许后台定位，设置进入或者离开某个地理区间就出发webhook request到你的flask endpoint (并把消息内容传给通过Request Body传给Flask app)，你的Flask app就可以向你的Telegram发送通知了。你也可以直接让IFTTT向Telegram地址发送通知。\n 在Flask app添加一个route接受页面访问触发的GET请求，并把来源IP发送给Telegram。你也可以在Flask app请求第三方IP地址库获取地理位置，一同发送给Telegram。\n 在脚本结束的时候触发GET/POST请求到你的Flask app，Flask app再向你的Telegram发送通知。你也可以直接从脚本向Telegram发送通知。","tags":null,"title":"利用Telegram和Flask打造私人通知服务器","type":"posts","url":"/zh/posts/2018/use-telegram-and-flask-to-build-notification-server/","weight":0,"wordcount":62},{"authors":null,"categories":null,"date":1531267200,"description":"","dir":"posts/2018/cloud-computing-exploration/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":[],"kind":"page","lang":"en","lastmod":1531267200,"objectID":"862fed9cdfcb0db6ec3fac8e5e335792","permalink":"https://tonyxu.io/posts/2018/cloud-computing-exploration/","publishdate":"2018-07-11T00:00:00Z","readingtime":2,"relpermalink":"/posts/2018/cloud-computing-exploration/","section":"posts","summary":"Talking about my experience with cloud computing, the first experience is when I\u0026rsquo;m in 11th grade, deploying a proxy application in Google App Engine to get over the Great Fire Wall in China. Later when I\u0026rsquo;m a freshman in college, I built a website for fun and subscribed shared hosting online. However, I found out that shared hosting has too many restrictions such as you have no control over softwares, so I switched to VPS.","tags":null,"title":"Cloud Computing Explorations","type":"posts","url":"/posts/2018/cloud-computing-exploration/","weight":0,"wordcount":250},{"authors":null,"categories":null,"date":1531267200,"description":"","dir":"posts/2018/cloud-computing-exploration/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":1531267200,"objectID":"bd35aa47dd2923c7a85cbb01d4ecea3a","permalink":"https://tonyxu.io/zh/posts/2018/cloud-computing-exploration/","publishdate":"2018-07-11T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2018/cloud-computing-exploration/","section":"posts","summary":"说起和云的接触，最早可以追溯到高二的时候Google被墙，被迫学网上的教程自己用Google App Engine跑GoAgent翻墙代理。大一的时候曾经折腾过一阵自建网站(纯属娱乐)，在网上购买过共享空间(Shared Hosting)，后来觉得限制太多，无法安装软件，就又购买了独立主机(VPS)。在美国读CS期间学Cloud Computing课程又在AWS上建过一些instance放简单网页。毕业后还尝试过Heroku (和Google App Engine类似)等云平台用于跑小型demo程序。虽然没有高强度使用云计算的经历，但是或多或少用过一些，也对云计算的应用趋势略有所感。\n总体来说，对于普通的开发者，如果只是需要跑一个后端，从最早的要自己搭建物理服务器，到后来网上租虚拟服务器（Digital Ocean)以及更加专业的AWS等之后，现在更多的开始用Serverless架构的服务(AWS Lambda, Google Cloud Functions, Firebase Cloud Functions, Azure Functions)，也就是说只需要关心代码本身，而不需要关心维护环境。\n我自己有跑一个Flask程序，目前放在Google App Engine上，主要是因为Google App Engine的Standard Environment版本是有免费额度的。这个Flask程序之前是Serve https://tonyxu.io 网站前端和后端(REST API)的请求。现在https://tonyxu.io的前端migrate到Firebase Hosting了，因此我打算重构在GAE上跑的后端。我会另外单独写一篇文章来记录我是如何搭建一个自用的后端REST API。","tags":null,"title":"云计算探索","type":"posts","url":"/zh/posts/2018/cloud-computing-exploration/","weight":0,"wordcount":30},{"authors":null,"categories":null,"date":1531008000,"description":"","dir":"posts/2018/create-alfred-workflow-for-uploading-screenshot-to-s3/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":[],"kind":"page","lang":"en","lastmod":1531008000,"objectID":"8a4e8a81b238ba505a2986a6681b3f4f","permalink":"https://tonyxu.io/posts/2018/create-alfred-workflow-for-uploading-screenshot-to-s3/","publishdate":"2018-07-08T00:00:00Z","readingtime":3,"relpermalink":"/posts/2018/create-alfred-workflow-for-uploading-screenshot-to-s3/","section":"posts","summary":"As Markdown markup language gets more and more popular, most people have a need to quickly generate a public url for screenshot/image in clipboard. Today I created an Alfred workflow that helps you upload images/screenshot in clipboard.\nDemo Overview  Use pngpaste to get image data from clipboard\n Write to a image file in /tmp folder\n Use boto3 to upload image file to AWS S3\n  Implementation Now we have the idea to achieve the goal, let\u0026rsquo;s do it in Alfred workflow and python script.","tags":null,"title":"Create Alfred workflow for uploading screenshot to S3","type":"posts","url":"/posts/2018/create-alfred-workflow-for-uploading-screenshot-to-s3/","weight":0,"wordcount":543},{"authors":null,"categories":null,"date":1531008000,"description":"","dir":"posts/2018/create-alfred-workflow-for-uploading-screenshot-to-s3/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":[],"kind":"page","lang":"zh","lastmod":1531008000,"objectID":"d8307764ab99cad7415ab23c494357d1","permalink":"https://tonyxu.io/zh/posts/2018/create-alfred-workflow-for-uploading-screenshot-to-s3/","publishdate":"2018-07-08T00:00:00Z","readingtime":2,"relpermalink":"/zh/posts/2018/create-alfred-workflow-for-uploading-screenshot-to-s3/","section":"posts","summary":"Markdown语言正在变得越来越流行，大多数人在使用Markdown语言的时候都会需要粘贴图片，然而Markdown粘贴图片必须要用链接。今天我想向大家介绍如何创建一个Alfred workflow来自动上传你剪切板里的图片到S3并获取公开链接。\n演示 主要步骤  使用 pngpaste 获取剪切板图片\n 把图片写到临时文件夹 /tmp\n 使用boto3上传图片到AWS S3\n  实现 现在我们知道主要步骤，接下来就是编写Alfred Workflow的Python脚本实现了。\n创建 Alfred workflow 创建 Blank Workflow 并命名\n右键空白区域并选择Inputs -\u0026gt; Keyword\n指定触发workflow的关键词\n右键空白区域并选择Actions -\u0026gt; Run Script\n让我们让它执行Python脚本\n点击Cancel左侧的按钮来打开workflow文件夹\n创建脚本文件(确保文件名和你在上面步骤制定的脚本名一致, 并按照如下所述编写脚本\n#!/usr/bin/python # -*- coding: utf-8 -*- from __future__ import print_function import datetime import os import sys import atexit import imghdr from subprocess import call from os.path import expanduser, exists, basename, getsize from workflow import Workflow def capture(): file_name = datetime.","tags":null,"title":"创建Alfred Workflow上传截图到S3","type":"posts","url":"/zh/posts/2018/create-alfred-workflow-for-uploading-screenshot-to-s3/","weight":0,"wordcount":234},{"authors":null,"categories":null,"date":1530662400,"description":"","dir":"posts/2018/join-linkedin-one-month-summary/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":[],"kind":"page","lang":"en","lastmod":1530662400,"objectID":"59e7bdcb45a76547662a7c1d30f251d4","permalink":"https://tonyxu.io/posts/2018/join-linkedin-one-month-summary/","publishdate":"2018-07-04T00:00:00Z","readingtime":2,"relpermalink":"/posts/2018/join-linkedin-one-month-summary/","section":"posts","summary":"Today is my so-called one month anniversary at LinkedIn. It\u0026rsquo;s been a fast week, bootcamp, Inday, and a week of shutdown. So it\u0026rsquo;s actually much less than a month.\nThe main thing on my list this month is to get familiar with the technology, tool, process, and products in LinkedIn. Although there is not a lot of happening, I should still look back and think about what can be improved.","tags":null,"title":"One month summary for joining LinkedIn","type":"posts","url":"/posts/2018/join-linkedin-one-month-summary/","weight":0,"wordcount":220},{"authors":null,"categories":null,"date":1530662400,"description":"","dir":"posts/2018/join-linkedin-one-month-summary/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":1530662400,"objectID":"61f6a1b556f8a1040836b2bc73e2c063","permalink":"https://tonyxu.io/zh/posts/2018/join-linkedin-one-month-summary/","publishdate":"2018-07-04T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2018/join-linkedin-one-month-summary/","section":"posts","summary":"今天入职LinkedIn一个月了，这一个月过的非常快，第一周培训，第二周InDay，第三周预备放假，第四周放一周假，所以事实上工作的时间远不到一个月。\n这一个月最主要的任务就是熟悉公司的技术、工具、流程和自己组的产品，中间还参加了不少内部的会。虽然第一个月不太可能有多亮眼的表现，但是还是应该总结一下。\n自己觉得表现好的地方：\n 对公司的技术和工具可以很快掌握\n 能发现现存问题并快速作出修复\n 对工作进度有计划\n  觉得有挑战的地方：\n 自然流畅的和美国人交谈工作和生活话题（组里没有中国人）\n 开会的时候觉得不够自信，很难参与讨论\n 和同事聊天的时候不够积极主动\n  其实我的情况相对于中国人来说相对比较普遍，技术上没有问题积极主动，但是社交方面比较欠缺，不能很好的口头表现自己。如果想改善这个问题，我想接下来的几个月可以从这几个方面入手：\n 提前浏览会议议题，争取对其中一两个议题充分理解并有自己的见解（开会的时候可以参与讨论）\n 提前思考如何回答常见的社交问题（如上周末过的怎样，这周末什么安排等）\n 鼓励自己在回答完对方的问题后能主动提出问题，引导话题\n  ","tags":null,"title":"入职LinkedIn一个月总结","type":"posts","url":"/zh/posts/2018/join-linkedin-one-month-summary/","weight":0,"wordcount":14},{"authors":null,"categories":null,"date":1530576000,"description":"","dir":"posts/2018/improve-your-ability-to-solve-problem-at-work/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":[],"kind":"page","lang":"en","lastmod":1530576000,"objectID":"eea484cb8bbf567e8b1af3398cbc4800","permalink":"https://tonyxu.io/posts/2018/improve-your-ability-to-solve-problem-at-work/","publishdate":"2018-07-03T00:00:00Z","readingtime":1,"relpermalink":"/posts/2018/improve-your-ability-to-solve-problem-at-work/","section":"posts","summary":"Problem-solving skill is the most important skill at work, you need to think about:\n If you are not good at solving problem\n How to improve the problem-solving skill\n  Look back to the two years working at Moxtra, the fundamental job I do is to solve problem, given that i\u0026rsquo;m a Solution Engineer. And the problem is basically:\n I have problem A, do you have solution B?","tags":null,"title":"Improve problem-solving skill","type":"posts","url":"/posts/2018/improve-your-ability-to-solve-problem-at-work/","weight":0,"wordcount":209},{"authors":null,"categories":null,"date":1530576000,"description":"","dir":"posts/2018/rest-api-design-interview-preparation/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":[],"kind":"page","lang":"en","lastmod":1530576000,"objectID":"8b6c5404b4cf808242bcd66888ce07b4","permalink":"https://tonyxu.io/posts/2018/rest-api-design-interview-preparation/","publishdate":"2018-07-03T00:00:00Z","readingtime":4,"relpermalink":"/posts/2018/rest-api-design-interview-preparation/","section":"posts","summary":"REST API has become a very popular concept for designing back-end service interface. Most platforms provide REST API as unified interface for web/native applications. If you are going to interview for a job that will require REST API knowledge, you are encouraged to be well prepared for it. Below is my own summary for REST API interview. Hopefully it\u0026rsquo;s helpful for you as well.\nPrinciple  Self-describing\n Simple","tags":null,"title":"REST API Design Interview Preparation","type":"posts","url":"/posts/2018/rest-api-design-interview-preparation/","weight":0,"wordcount":680},{"authors":null,"categories":null,"date":1530576000,"description":"","dir":"posts/2018/rest-api-design-interview-preparation/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":[],"kind":"page","lang":"zh","lastmod":1530576000,"objectID":"3f5c7b92e70f4cbcdbd36c4aeecf7050","permalink":"https://tonyxu.io/zh/posts/2018/rest-api-design-interview-preparation/","publishdate":"2018-07-03T00:00:00Z","readingtime":2,"relpermalink":"/zh/posts/2018/rest-api-design-interview-preparation/","section":"posts","summary":"现在 REST API 已经越来越流行被用作前后端的借口。大多数平台都提供 REST API 作为兼容 Web 端和移动端通用接口。如果你即将面试一个要求对 REST API 非常熟悉的岗位，我推荐你多准备 REST API 相关知识。以下是我个人对 REST API 的面试准备。\n设计原则  自描述\n 简单\n 安全\n  准备  确定用户\n 来自内部或者外部\n 角色 (开发者, 管理员, 客户, 客服\u0026hellip;)\n  确定使用场景\n 确定需要提供的功能\n 分析并确定上述，再开始设计\n  注意:\n 不要猜想\n 不要杜撰\n  设计流程  确定 REST API 要提供对哪些资源的操作\n 确定不同资源的关系\n 根据资源类型和关系决定资源名的定义方法\n 为资源确定必须的操作方法\n  接口设计 设计如何提供资源的操作方法","tags":null,"title":"REST API 设计面试准备","type":"posts","url":"/zh/posts/2018/rest-api-design-interview-preparation/","weight":0,"wordcount":303},{"authors":null,"categories":null,"date":1530576000,"description":"","dir":"posts/2018/improve-your-ability-to-solve-problem-at-work/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":1530576000,"objectID":"5064cfbf6e813a4f2759b4dabf80418e","permalink":"https://tonyxu.io/zh/posts/2018/improve-your-ability-to-solve-problem-at-work/","publishdate":"2018-07-03T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2018/improve-your-ability-to-solve-problem-at-work/","section":"posts","summary":"解决问题是工作中最必不可少的能力，因此需要思考:\n 自己是否有在解决问题这个方面的能力有欠缺\n 如何才能提升这个能力\n  回想过去两年在Moxtra的工作经历，自己作为一个Solutions Engineer, 根本职能就是为客户解决问题。问题的模式无非是:\n 我有A需求，你们有没有B解决方案实现这个需求\n  大部分情况下我会评估如下几个方面然后回答：\n 我们是否有现成的解决方案\n 如果需要做支持，是否符合我们的产品定位和路线图\n 对公司营收影响大不大\n  如果其中任何一条不满足要求，我可能会直接拒绝这个需求。这么做看起来没什么问题，避免了公司产品为了第三方做太多不必要的妥协。但是仔细想，我作为Solution Engineer，在这当中可以做更多的事情。\n比如:\n 深入了解需求场景，确定是不是真的只有*需求A*才能解决问题\n 探索是否有其他解决方案可以作为work around\n  一定要带着解决问题的思维模式进行思考，而不是简单的做Yes/No判断，最后把不能解决问题的责任推给其他人/事。","tags":null,"title":"提升工作中解决问题的能力","type":"posts","url":"/zh/posts/2018/improve-your-ability-to-solve-problem-at-work/","weight":0,"wordcount":18},{"authors":null,"categories":null,"date":1530489600,"description":"","dir":"posts/2018/get-started/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"en","lastmod":1530489600,"objectID":"14f9462eb2328302eb29463fad498cc5","permalink":"https://tonyxu.io/posts/2018/get-started/","publishdate":"2018-07-02T00:00:00Z","readingtime":1,"relpermalink":"/posts/2018/get-started/","section":"posts","summary":"Today, I decided to start this blog, which I hope can encourage me to think more and summarize more for my work and life.","tags":null,"title":"Preface","type":"posts","url":"/posts/2018/get-started/","weight":0,"wordcount":24},{"authors":null,"categories":null,"date":1530489600,"description":"","dir":"posts/2018/get-started/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":1530489600,"objectID":"b8212e39ecbf6affae36a6f551a845a8","permalink":"https://tonyxu.io/zh/posts/2018/get-started/","publishdate":"2018-07-02T00:00:00Z","readingtime":1,"relpermalink":"/zh/posts/2018/get-started/","section":"posts","summary":"今天决定建立这个博客，鼓励自己在生活和工作中多思考和总结。","tags":null,"title":"写在开头","type":"posts","url":"/zh/posts/2018/get-started/","weight":0,"wordcount":1},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"about/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":[],"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c29b9617fa2d0de4785d09bf94799bfb","permalink":"https://tonyxu.io/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"Hey there, I\u0026rsquo;m Tony Xu, currently working for LinkedIn as a Software Engineer. I love technology and always follow the advancements in technology, especially in the topic of web, mobile, and AI. I have a passion for designing and creating things, notably with code. When I\u0026rsquo;m not coding, I enjoy travelling with family and make travel videos. I live in the San Francisco bay area with my fiancée Helen.\nIn this blog, I share things on my mind, my learnings, and my interests of all kind.","tags":null,"title":"About","type":"page","url":"/about/","weight":0,"wordcount":102},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":-62135596800,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://tonyxu.io/categories/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/","section":"categories","summary":"","tags":null,"title":"Categories","type":"categories","url":"/categories/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"taxonomyTerm","lang":"zh","lastmod":-62135596800,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://tonyxu.io/zh/categories/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/zh/categories/","section":"categories","summary":"","tags":null,"title":"Categories","type":"categories","url":"/zh/categories/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"friends/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f3d39588ab872b35e524442cc784c609","permalink":"https://tonyxu.io/friends/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/friends/","section":"","summary":"","tags":null,"title":"Friends","type":"friends","url":"/friends/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1552089600,"description":"News, blog, and articles I read and find interesting","dir":"reads/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"section","lang":"en","lastmod":1552089600,"objectID":"224aee0e8762b14a3947171c58b576af","permalink":"https://tonyxu.io/reads/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/reads/","section":"reads","summary":"","tags":null,"title":"Good Reads","type":"reads","url":"/reads/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1552176000,"description":"My thoughts of life and code","dir":"posts/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"section","lang":"en","lastmod":1552176000,"objectID":"a74dbcb35ee06db2c5314e7ff0d9268f","permalink":"https://tonyxu.io/posts/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/posts/","section":"posts","summary":"","tags":null,"title":"Posts","type":"posts","url":"/posts/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"search/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"36bbcd133f7a45271c3013c30fd36e8d","permalink":"https://tonyxu.io/search/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/","section":"","summary":"","tags":null,"title":"Search","type":"search","url":"/search/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":-62135596800,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://tonyxu.io/tags/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/","section":"tags","summary":"","tags":null,"title":"Tags","type":"tags","url":"/tags/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"taxonomyTerm","lang":"zh","lastmod":-62135596800,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://tonyxu.io/zh/tags/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/zh/tags/","section":"tags","summary":"","tags":null,"title":"Tags","type":"tags","url":"/zh/tags/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1552176000,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"home","lang":"en","lastmod":1552176000,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://tonyxu.io/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/","section":"","summary":"","tags":null,"title":"Tony Xu Blog","type":"page","url":"/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1552176000,"description":"","dir":"","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"home","lang":"zh","lastmod":1552176000,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://tonyxu.io/zh/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/zh/","section":"","summary":"","tags":null,"title":"Tony Xu 博客","type":"page","url":"/zh/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"about/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"e4c0e3e90bed1f8b00c51629e82335e8","permalink":"https://tonyxu.io/zh/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/zh/about/","section":"","summary":"我是徐毅涵，一名在领英工作的软件工程师。我从小热爱科技，始终追随科技潮流，尤其在互联网科技、移动互联网、和人工智能领域。我喜欢自己设计并制作有趣的东西，特别是通过代码。当我不在写代码的时候，我喜欢和我的家庭一起出游，用摄像机记录旅行视频。我和我的未婚妻 Helen 居住在旧金山湾区。\n我会在这个博客分享我正在思考的事情，我的学习感悟，以及任何我感兴趣的事物。欢迎通过以下方式和我交流:\n Email: me@tonyxu.io\n LinkedIn: https://linkedin.com/in/tonyxu93\n GitHub: https://github.com/tonyxu-io\n  ","tags":null,"title":"关于","type":"page","url":"/zh/about/","weight":0,"wordcount":10},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"friends/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"0e8ff4241c3193f301a63b2b245f5d45","permalink":"https://tonyxu.io/zh/friends/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/zh/friends/","section":"","summary":"","tags":null,"title":"友情链接","type":"friends","url":"/zh/friends/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1552089600,"description":"在互联网上阅读到值得推荐的新闻、博客、文章","dir":"reads/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"section","lang":"zh","lastmod":1552089600,"objectID":"f094ae6fee9fe397119dd18282295425","permalink":"https://tonyxu.io/zh/reads/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/zh/reads/","section":"reads","summary":"","tags":null,"title":"推荐阅读","type":"reads","url":"/zh/reads/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"search/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"a646450d5fd136cd976fe37a2f9bac27","permalink":"https://tonyxu.io/zh/search/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/zh/search/","section":"","summary":"","tags":null,"title":"搜索","type":"search","url":"/zh/search/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":1552176000,"description":"对于人生和代码的思考","dir":"posts/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":[],"kind":"section","lang":"zh","lastmod":1552176000,"objectID":"ee324bf107d892cd698fded2f5a858dd","permalink":"https://tonyxu.io/zh/posts/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/zh/posts/","section":"posts","summary":"","tags":null,"title":"文章","type":"posts","url":"/zh/posts/","weight":0,"wordcount":0}]